演示5.2：#1进程的变量mynext的物理地址
分析对象：版本1.5内核

本实验用到的命令汇总：
--------------------------------------------------------------
nudt@uvm:~/os/linux-0.11-lab$ ./rundbg
<bochs:1> b 0x699f
<bochs:2> c
<bochs:3> c
<bochs:4> sreg
<bochs:5> x/wx 0x17:0x1fcac
<bochs:6> xp/wx 0x1fcac
<bochs:7> creg
<bochs:8> x/17wx 0
<bochs:9> x/32wx 0xffe000
<bochs:10> xp/wx 0xffccac
<bochs:11> info tab


调试过程：
--------------------------------------------------------------
nudt@uvm:~/os/linux-0.11-lab$ ./rundbg
========================================================================
                       Bochs x86 Emulator 2.6.9
               Built from SVN snapshot on April 9, 2017
                  Compiled on Apr 24 2020 at 16:32:41
========================================================================
00000000000i[      ] BXSHARE not set. using compile time default '/usr/local/share/bochs'
00000000000i[      ] reading configuration from conf/0.11.bxrc
00000000000i[      ] installing x module as the Bochs GUI
00000000000i[      ] using log file bochsout.txt
Next at t=0
(0) [0x0000fffffff0] f000:fff0 (unk. ctxt): jmpf 0xf000:e05b          ; ea5be000f0

//跟踪到main.c的第155行指令的第2次执行
<bochs:1> b 0x699f

<bochs:2> c
(0) Breakpoint 1, 0x0400699f in ?? ()
Next at t=116317714
(0) [0x00000000699f] 000f:0000699f (unk. ctxt): mov eax, dword ptr ds:0x0001fcac ; a1acfc0100

<bochs:3> c
(0) Breakpoint 1, 0x0400699f in ?? ()
Next at t=131580101
(0) [0x00000000699f] 000f:0000699f (unk. ctxt): mov eax, dword ptr ds:0x0001fcac ; a1acfc0100
  此时1号进程准备输出字符'B'

//查看当前ds寄存器的值
<bochs:4> sreg
es:0x0017, dh=0x04c0f300, dl=0x0000009f, valid=1
	Data segment, base=0x04000000, limit=0x0009ffff, Read/Write, Accessed
cs:0x000f, dh=0x04c0fb00, dl=0x0000009f, valid=1
	Code segment, base=0x04000000, limit=0x0009ffff, Execute/Read, Non-Conforming, Accessed, 32-bit
ss:0x0017, dh=0x04c0f300, dl=0x0000009f, valid=7
	Data segment, base=0x04000000, limit=0x0009ffff, Read/Write, Accessed
ds:0x0017, dh=0x04c0f300, dl=0x0000009f, valid=3
	Data segment, base=0x04000000, limit=0x0009ffff, Read/Write, Accessed
fs:0x0017, dh=0x04c0f300, dl=0x0000009f, valid=1
	Data segment, base=0x04000000, limit=0x0009ffff, Read/Write, Accessed
gs:0x0017, dh=0x04c0f300, dl=0x0000009f, valid=1
	Data segment, base=0x04000000, limit=0x0009ffff, Read/Write, Accessed
ldtr:0x0038, dh=0x000082ff, dl=0xf2d00068, valid=1
tr:0x0030, dh=0x00008bff, dl=0xf2e80068, valid=1
gdtr:base=0x00005cc0, limit=0x7ff
idtr:base=0x000054c0, limit=0x7ff

//查看1号进程的mynext变量的线性地址
<bochs:5> x/wx 0x17:0x1fcac
[bochs]:
0x0401fcac <bogus+       0>:	0x00000002
   ^此为逻辑地址0x17:0x1fcac对应的线性地址

//查看物理地址0x1fcac处的值
<bochs:6> xp/wx 0x1fcac
[bochs]:
0x0001fcac <bogus+       0>:	0x00000007
  ^线性地址0x0401fcac对应的物理地址不在这里

//查看CR3的值（页目录的起始地址）
<bochs:7> creg
CR0=0x8000001b: PG cd nw ac wp ne ET TS em MP PE
CR2=page fault laddr=0x0401fcac
CR3=0x000000000000
    PCD=page-level cache disable=0
    PWT=page-level write-through=0
CR4=0x00000000: pke smap smep osxsave pcid fsgsbase smx vmx osxmmexcpt umip osfxsr pce pge mce pae pse de tsd pvi vme
EFER=0x00000000: ffxsr nxe lma lme sce
  可见页目录起始地址为0

//计算线性地址0x0401fcac在页目录和页表中的索引以及在二级页表中的页表项的索引
//{-----------另开一个窗口，启动gdb来计算
(gdb) p 0x401fcac >> 22
$1 = 16
  此为高10位的值，即对应的页目录项的索引

(gdb) p (unsigned)0x401fcac << 10 >> 22
$2 = 31
  此为中间10位的值，即对应的页表项的索引
//}

//查看16号页目录项
<bochs:8> x/17wx 0
[bochs]:
0x00000000 <bogus+       0>:	0x00001027	0x00002007	0x00003007	0x00004027
0x00000010 <bogus+      16>:	0x00000000	0x00000000	0x00000000	0x00000000
0x00000020 <bogus+      32>:	0x00000000	0x00000000	0x00000000	0x00000000
0x00000030 <bogus+      48>:	0x00000000	0x00000000	0x00000000	0x00000000
0x00000040 <bogus+      64>:	0x00ffe027
                                  ^可见对应的页表首地址为0xffe000

//查看该页表的31号页表项
<bochs:9> x/32wx 0xffe000
[bochs]:
0x00ffe000 <bogus+       0>:	0x00000065	0x00001025	0x00002005	0x00003005
0x00ffe010 <bogus+      16>:	0x00004005	0x00005065	0x00006065	0x00007025
0x00ffe020 <bogus+      32>:	0x00008025	0x00009005	0x0000a025	0x0000b025
0x00ffe030 <bogus+      48>:	0x0000c005	0x0000d025	0x0000e005	0x0000f005
0x00ffe040 <bogus+      64>:	0x00010005	0x00011005	0x00012025	0x00013025
0x00ffe050 <bogus+      80>:	0x00014025	0x00015025	0x00016025	0x00017025
0x00ffe060 <bogus+      96>:	0x00018005	0x00019025	0x0001a005	0x0001b025
0x00ffe070 <bogus+     112>:	0x0001c065	0x0001d065	0x0001e025	0x00ffc067
                                                          可见对应页框的首地址为0xffc000^
//查看物理地址0xffccac的值
<bochs:10> xp/wx 0xffccac
[bochs]:
0x00ffccac <bogus+       0>:	0x00000002
  此即为1号进程的变量mynext

//可查看当前整个线性地址空间（虚空间）的映射情况
<bochs:11> info tab
cr3: 0x000000000000
0x00000000-0x00ffffff -> 0x000000000000-0x000000ffffff  //第16M空间是对等映射（两个地址相同）
0x04000000-0x0401efff -> 0x000000000000-0x00000001efff
0x0401f000-0x0401ffff -> 0x000000ffc000-0x000000ffcfff  //此为1号进程的变量mynext所在的页面
0x04020000-0x04021fff -> 0x000000020000-0x000000021fff
0x04022000-0x04022fff -> 0x000000ffd000-0x000000ffdfff
0x04023000-0x0409ffff -> 0x000000023000-0x00000009ffff

<bochs:12> 
